version: 2.1

orbs:
  slack: circleci/slack@3.4.2

terraform-run: &terraform-run
  docker:
    - image: mungi/terraform-aws-k8s
  working_directory: ~/project
  steps:
    - checkout
    - run:
        name: Run terraform at ${MODULE_DIR}
        command: |
          cd ${MODULE_DIR}; pwd;
          source ../set_aws_configure.sh
          terraform init -input=false -backend-config="../project.tfvars"
          terraform plan -input=false -var-file="../project.tfvars" -var-file="../default-tags.tfvars"  -out tfplan.out
          terraform apply tfplan.out

ansible-run: &ansible-run
  docker:
    - image: mungi/terraform-aws-k8s
  working_directory: ~/project
  steps:
    - checkout
    - run:
        command: |
          cd ${MODULE_DIR}; pwd;
          source ../set_aws_configure.sh
          aws eks update-kubeconfig --name ${CLUSTER_NAME} --region $AWS_REGION --profile ${AWS_DEFAULT_PROFILE}
          ansible-playbook -i inventory ${RUN_FILE}

k8s-run: &k8s-run
  docker:
    - image: mungi/terraform-aws-k8s
  working_directory: ~/project
  steps:
    - checkout
    - run:
        command: |
          cd ${MODULE_DIR}; pwd;
          source ../set_aws_configure.sh
          aws eks update-kubeconfig --name ${CLUSTER_NAME} --region $AWS_REGION --profile ${AWS_DEFAULT_PROFILE}
          kubectl apply -f namespace.yaml
          kubectl apply -f .

jobs:
  build:
    docker:
      - image: mungi/terraform-aws-k8s
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Workflow Start job
          command: |
            echo "Workflow Start! - Checking AWS credential"
            # echo $(pwd)
            # source ./set_aws_configure.sh
            # aws sts get-caller-identity --profile ${AWS_DEFAULT_PROFILE}

  demo-tf-backend:
    environment:
      MODULE_DIR: tf-backend
    <<: *terraform-run

  demo-s3:
    environment:
      MODULE_DIR: S3
    <<: *terraform-run
  
  demo-common-vpc:
    environment:
      MODULE_DIR: common-vpc
    <<: *terraform-run

  demo-common-efs:
    environment:
      MODULE_DIR: common-efs
    <<: *terraform-run

  demo-common-rds:
    environment:
      MODULE_DIR: common-rds
    <<: *terraform-run

  demo-common-ec2:
    environment:
      MODULE_DIR: common-ec2
    <<: *terraform-run

  demo-miip-vpc:
    environment:
      MODULE_DIR: miip-vpc
    <<: *terraform-run

  demo-miip-rds:
    environment:
      MODULE_DIR: miip-rds
    <<: *terraform-run

  demo-miip-efs:
    environment:
      MODULE_DIR: miip-efs
    <<: *terraform-run

  demo-miip-eks:
    environment:
      MODULE_DIR: miip-eks
      CLUSTER_NAME: miip-d-cluster
    <<: *terraform-run

  demo-miip-eks-oc:
    environment:
      MODULE_DIR: miip-eks-oc
      CLUSTER_NAME: oc-d-cluster
    <<: *terraform-run

  demo-miip-elasticsearch:
    environment:
      MODULE_DIR: miip-elasticsearch
    <<: *terraform-run

  demo-miip-ec2:
    environment:
      MODULE_DIR: miip-ec2
    <<: *terraform-run

  demo-miip-waf:
    environment:
      MODULE_DIR: miip-waf
    <<: *terraform-run

  demo-miip-lustre:
    environment:
      MODULE_DIR: miip-lustre
    <<: *terraform-run

  demo-miip-telemetry:
    environment:
      MODULE_DIR: miip-telemetry
      RUN_FILE: deploy_telemetry.yaml
      CLUSTER_NAME: miip-d-cluster
    <<: *ansible-run

  demo-miip-logging:
    environment:
      MODULE_DIR: miip-logging
      CLUSTER_NAME: miip-d-cluster
    <<: *k8s-run

  demo-miip-apps:
    environment:
      MODULE_DIR: miip-apps
      CLUSTER_NAME: miip-d-cluster
    docker:
      - image: mungi/terraform-aws-k8s
    working_directory: ~/project
    steps:
      - checkout
      - run:
          command: |
            cd ${MODULE_DIR}; pwd;
            source ../set_aws_configure.sh
            aws eks update-kubeconfig --name ${CLUSTER_NAME} --region $AWS_REGION --profile ${AWS_DEFAULT_PROFILE}

  demo-notify:
    docker:
    - image: mungi/terraform-aws-k8s
    working_directory: ~/project
    steps:
      - slack/notify:
          channel: 'circle_ci_aws'
          color: '#3AA3E3'
          message: Complete deploying AWS DEMO Infra
          webhook: '${SLACK_WEBHOOK}'

workflows:
  version: 2
  demo-pipeline:
    jobs:
      # - demo-tf-backend
      - build
      # - hold:
      #     type: approval
      #     requires:
      #       - build
      # - slack/approval-notification:
      #     requires:
      #       - build
### COMMON
      - demo-s3:
          requires:
            - build
      - demo-common-vpc:
          requires:
            - build
      - demo-common-efs:
          requires:
            - demo-common-vpc
      - demo-common-rds:
          requires:
            - demo-common-vpc
      # - demo-common-ec2:
      #     requires:
      #       - demo-common-vpc
### miip
      - demo-miip-vpc:
          requires:
            - build
      - demo-miip-waf:
          requires:
            - build
      - demo-miip-efs:
          requires:
            - demo-miip-vpc
      # - demo-miip-lustre:
      #     requires:
      #       - demo-miip-vpc
      - demo-miip-ec2:
          requires:
            - demo-miip-vpc
      - demo-miip-rds:
          requires:
            - demo-miip-vpc
      - demo-miip-eks:
          requires:
            - demo-miip-vpc
      - demo-miip-eks-oc:
          requires:
            - demo-miip-vpc
      - demo-miip-elasticsearch:
          requires:
            - demo-miip-vpc
      - demo-miip-telemetry:
          requires:
            - demo-miip-eks
      - demo-miip-logging:
          requires:
            - demo-miip-eks
      - demo-miip-apps:
          requires:
            - demo-miip-telemetry
# END NOTIFY
      - demo-notify:
          requires:
            - demo-s3
            - demo-common-efs
            - demo-miip-apps

            # - demo-common-ec2

